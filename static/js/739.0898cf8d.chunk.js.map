{"version":3,"file":"static/js/739.0898cf8d.chunk.js","mappings":"wSAMA,SAASA,EAAKC,GACb,IACIC,EAAOD,EAAKE,WAEVC,EAAUC,OAAOC,YAAY,IAKnC,OAJAF,EAAQG,WAJM,EAIc,GAE5BL,EAAKM,KAAKJ,EAAS,IAEXK,EAAAA,EAAAA,QAAOL,GAGT,SAASM,IAA6F,IAAvEC,EAAsE,uDAA1D,EAAGC,EAAuD,uCAA3CC,EAA2C,uCAA5BC,EAA4B,uCACvGC,EAAiB,GACjBC,EAAUC,GAAAA,CAAW,UAAUC,OAAOL,GAAQM,SAASC,SAAS,OACpEC,QAAQC,IAAI,YAAcN,GAE1B,IAAIO,GAAWC,EAAAA,EAAAA,IAAkBR,GACjCK,QAAQC,IAAI,aAAeC,GAM3B,IAJA,IAAIE,GAAOC,EAAAA,EAAAA,IAAmBH,EAAUT,GACpCa,GAASC,EAAAA,EAAAA,IAASH,GAGbI,EAAIlB,EAAMkB,EAAIjB,EAAKiB,IAAK,CAChC,IAAI5B,EAAO0B,EAAOG,WAAW,iBAAmBD,GAC5CE,EAAU/B,EAAKC,GACnBoB,QAAQC,IAAI,QAAUO,EAAI,KAAOE,GACjChB,EAAMc,GAAIE,EAGX,OAAOhB,EAGD,SAASiB,IAA8F,IAAvErB,EAAsE,uDAA1D,EAAGC,EAAuD,uCAA3CC,EAA2C,uCAA5BC,EAA4B,uCACxGC,EAAiB,GACjBC,EAAUC,GAAAA,CAAW,UAAUC,OAAOL,GAAQM,SAASC,SAAS,OACpEC,QAAQC,IAAI,YAAcN,GAE1B,IAAIO,GAAWC,EAAAA,EAAAA,IAAkBR,GACjCK,QAAQC,IAAI,aAAeC,GAM3B,IAJA,IAAIE,GAAOC,EAAAA,EAAAA,IAAmBH,EAAUT,GACpCa,GAASC,EAAAA,EAAAA,IAASH,GAGbI,EAAIlB,EAAMkB,EAAIjB,EAAKiB,IAAK,CAChC,IAAI5B,EAAO0B,EAAOG,WAAW,kBAAoBD,GAC7CE,GAAUE,EAAAA,EAAAA,mBAAkB,MAAKC,EAAAA,EAAAA,cAAajC,EAAKkC,WAAW,GAAMf,SAAS,QACjFL,EAAMc,GAAKE,EACXV,QAAQC,IAAI,QAAUO,EAAI,KAAOE,GAGlC,OAAOhB,I","sources":["lib/brainwallet.ts"],"sourcesContent":["import createHash from \"create-hash\";\nimport  {encode} from \"bs58check\"\nimport {entropyToMnemonic, mnemonicToSeedSync} from \"bip39\"\nimport {fromSeed, BIP32Interface} from \"bip32\";\nimport {pubToAddress, toChecksumAddress} from \"ethereumjs-util\";\n\nfunction addr(node:BIP32Interface):string {\n\tlet version = 0x0;\n\tlet hash = node.identifier; // hash160 of the publicKey\n\n\tconst payload = Buffer.allocUnsafe(21);\n\tpayload.writeUInt8(version, 0);\n\n\thash.copy(payload, 1);\n\n\treturn  encode(payload);\n}\n\nexport function GenBitcoinBrainWallet(from:number=0, end:number, puzzle:string, passphrase:string): string[]{\n\tlet addrs:string[] = [];\n\tlet entropy = createHash(\"sha256\").update(puzzle).digest().toString(\"hex\");\n\tconsole.log(\"entropy: \" + entropy); //a8fd89fcc8496d1536b57d91ba60eda4069dbb4ec62bea889b2ca510c6419f14\n\n\tvar mnemonic = entropyToMnemonic(entropy);\n\tconsole.log(\"mnemonic: \" + mnemonic); //pottery unable left mountain nothing melody suspect quick museum spread derive elite hawk tank deposit shell tunnel dynamic sleep enforce arrest camp labor lucky\n\n\tvar seed = mnemonicToSeedSync(mnemonic, passphrase);\n\tvar master = fromSeed(seed); // m\n\n// generate 10 btc addresses...\n\tfor (let i = from; i < end; i++) {\n\t\tvar node = master.derivePath(\"m/44'/0'/0'/1/\" + i);\n\t\tvar address = addr(node);\n\t\tconsole.log(\"BTC #\" + i + \": \" + address);\n\t\taddrs[i] =address\n\t}\n\n\treturn addrs;\n}\n\nexport function GenEthereumBrainWallet(from:number=0, end:number, puzzle:string, passphrase:string):string[] {\n\tlet addrs:string[] = [];\n\tlet entropy = createHash(\"sha256\").update(puzzle).digest().toString(\"hex\");\n\tconsole.log(\"entropy: \" + entropy); //a8fd89fcc8496d1536b57d91ba60eda4069dbb4ec62bea889b2ca510c6419f14\n\n\tvar mnemonic = entropyToMnemonic(entropy);\n\tconsole.log(\"mnemonic: \" + mnemonic); //pottery unable left mountain nothing melody suspect quick museum spread derive elite hawk tank deposit shell tunnel dynamic sleep enforce arrest camp labor lucky\n\n\tvar seed = mnemonicToSeedSync(mnemonic, passphrase);\n\tvar master = fromSeed(seed); // m\n\n// generate 10 eth addresses...\n\tfor (let i = from; i < end; i++) {\n\t\tvar node = master.derivePath(\"m/44'/60'/0'/0/\" + i);\n\t\tvar address = toChecksumAddress(\"0x\"+pubToAddress(node.publicKey, true).toString(\"hex\"));\n\t\taddrs[i] = address;\n\t\tconsole.log(\"ETH #\" + i + \": \" + address);\n\n\t}\n\treturn addrs;\n\n}"],"names":["addr","node","hash","identifier","payload","Buffer","allocUnsafe","writeUInt8","copy","encode","GenBitcoinBrainWallet","from","end","puzzle","passphrase","addrs","entropy","createHash","update","digest","toString","console","log","mnemonic","entropyToMnemonic","seed","mnemonicToSeedSync","master","fromSeed","i","derivePath","address","GenEthereumBrainWallet","toChecksumAddress","pubToAddress","publicKey"],"sourceRoot":""}