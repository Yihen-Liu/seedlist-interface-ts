/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface PermissionInterface extends utils.Interface {
  contractName: "Permission";
  functions: {
    "addable()": FunctionFragment;
    "networkID()": FunctionFragment;
    "nftMintable()": FunctionFragment;
    "owner()": FunctionFragment;
    "setAddable(bool)": FunctionFragment;
    "setNetworkId(uint256)": FunctionFragment;
    "setNftMintable(bool)": FunctionFragment;
    "setTokenMintable(bool)": FunctionFragment;
    "setUpdateable(bool)": FunctionFragment;
    "tokenMintable()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateable()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "addable", values?: undefined): string;
  encodeFunctionData(functionFragment: "networkID", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nftMintable",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "setAddable", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "setNetworkId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setNftMintable",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenMintable",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setUpdateable",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenMintable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateable",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "addable", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "networkID", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nftMintable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setAddable", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setNetworkId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNftMintable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenMintable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUpdateable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenMintable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateable", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { _from: string; _to: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface Permission extends BaseContract {
  contractName: "Permission";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PermissionInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addable(overrides?: CallOverrides): Promise<[boolean]>;

    networkID(overrides?: CallOverrides): Promise<[BigNumber]>;

    nftMintable(overrides?: CallOverrides): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    setAddable(
      _addable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setNetworkId(
      _networkID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setNftMintable(
      value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTokenMintable(
      value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUpdateable(
      _updateadd: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenMintable(overrides?: CallOverrides): Promise<[boolean]>;

    transferOwnership(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateable(overrides?: CallOverrides): Promise<[boolean]>;
  };

  addable(overrides?: CallOverrides): Promise<boolean>;

  networkID(overrides?: CallOverrides): Promise<BigNumber>;

  nftMintable(overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  setAddable(
    _addable: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setNetworkId(
    _networkID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setNftMintable(
    value: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTokenMintable(
    value: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUpdateable(
    _updateadd: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenMintable(overrides?: CallOverrides): Promise<boolean>;

  transferOwnership(
    _owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateable(overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    addable(overrides?: CallOverrides): Promise<boolean>;

    networkID(overrides?: CallOverrides): Promise<BigNumber>;

    nftMintable(overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    setAddable(_addable: boolean, overrides?: CallOverrides): Promise<boolean>;

    setNetworkId(
      _networkID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setNftMintable(value: boolean, overrides?: CallOverrides): Promise<boolean>;

    setTokenMintable(
      value: boolean,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setUpdateable(
      _updateadd: boolean,
      overrides?: CallOverrides
    ): Promise<boolean>;

    tokenMintable(overrides?: CallOverrides): Promise<boolean>;

    transferOwnership(_owner: string, overrides?: CallOverrides): Promise<void>;

    updateable(overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      _from?: string | null,
      _to?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      _from?: string | null,
      _to?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    addable(overrides?: CallOverrides): Promise<BigNumber>;

    networkID(overrides?: CallOverrides): Promise<BigNumber>;

    nftMintable(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    setAddable(
      _addable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setNetworkId(
      _networkID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setNftMintable(
      value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTokenMintable(
      value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setUpdateable(
      _updateadd: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenMintable(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateable(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    networkID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nftMintable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAddable(
      _addable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setNetworkId(
      _networkID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setNftMintable(
      value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTokenMintable(
      value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUpdateable(
      _updateadd: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenMintable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateable(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
