/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface DefaultEncryptInterface extends utils.Interface {
  contractName: "DefaultEncrypt";
  functions: {
    "addKey(address,address,address,bytes32,bytes32,bytes32,uint8,address,address,string,string)": FunctionFragment;
    "addSplitKey(address,address,address,bytes32,bytes32,bytes32,uint8,address,address,address,string,string)": FunctionFragment;
    "addable()": FunctionFragment;
    "getKey(address,address,bytes32,bytes32,bytes32,uint8)": FunctionFragment;
    "getSplitKey(address,bytes32,bytes32,bytes32,uint8,address,address)": FunctionFragment;
    "initKeySpace(address,address,bytes32,bytes32,bytes32,uint8,uint256)": FunctionFragment;
    "isLabelExist(address,bytes32,bytes32,bytes32,uint8,address)": FunctionFragment;
    "keySpace(address)": FunctionFragment;
    "keySpaceExist(address)": FunctionFragment;
    "mask()": FunctionFragment;
    "networkID()": FunctionFragment;
    "nftMintable()": FunctionFragment;
    "owner()": FunctionFragment;
    "seedToken()": FunctionFragment;
    "setAddable(bool)": FunctionFragment;
    "setMask(address)": FunctionFragment;
    "setNetworkId(uint256)": FunctionFragment;
    "setNftMintable(bool)": FunctionFragment;
    "setTokenMintable(bool)": FunctionFragment;
    "setTreasury(address)": FunctionFragment;
    "setUpdateable(bool)": FunctionFragment;
    "spaceExist(address,bytes32,bytes32,bytes32,uint8)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "tokenMintable()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "treasury()": FunctionFragment;
    "unstrictLabels(address,bytes32,bytes32,bytes32,uint8)": FunctionFragment;
    "updateKey(address,bytes32,bytes32,bytes32,uint8,address,address,string)": FunctionFragment;
    "updateable()": FunctionFragment;
    "withdraw(address,uint256,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addKey",
    values: [
      string,
      string,
      string,
      BytesLike,
      BytesLike,
      BytesLike,
      BigNumberish,
      string,
      string,
      string,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addSplitKey",
    values: [
      string,
      string,
      string,
      BytesLike,
      BytesLike,
      BytesLike,
      BigNumberish,
      string,
      string,
      string,
      string,
      string
    ]
  ): string;
  encodeFunctionData(functionFragment: "addable", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getKey",
    values: [string, string, BytesLike, BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSplitKey",
    values: [
      string,
      BytesLike,
      BytesLike,
      BytesLike,
      BigNumberish,
      string,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initKeySpace",
    values: [
      string,
      string,
      BytesLike,
      BytesLike,
      BytesLike,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isLabelExist",
    values: [string, BytesLike, BytesLike, BytesLike, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "keySpace", values: [string]): string;
  encodeFunctionData(
    functionFragment: "keySpaceExist",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "mask", values?: undefined): string;
  encodeFunctionData(functionFragment: "networkID", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nftMintable",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "seedToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "setAddable", values: [boolean]): string;
  encodeFunctionData(functionFragment: "setMask", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setNetworkId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setNftMintable",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenMintable",
    values: [boolean]
  ): string;
  encodeFunctionData(functionFragment: "setTreasury", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setUpdateable",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "spaceExist",
    values: [string, BytesLike, BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenMintable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "unstrictLabels",
    values: [string, BytesLike, BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateKey",
    values: [
      string,
      BytesLike,
      BytesLike,
      BytesLike,
      BigNumberish,
      string,
      string,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, BigNumberish, string]
  ): string;

  decodeFunctionResult(functionFragment: "addKey", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addSplitKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addable", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getKey", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSplitKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initKeySpace",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isLabelExist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "keySpace", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "keySpaceExist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mask", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "networkID", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nftMintable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "seedToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setAddable", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setMask", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setNetworkId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNftMintable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenMintable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUpdateable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "spaceExist", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenMintable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unstrictLabels",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateKey", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "updateable", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "AddKey(string,bool)": EventFragment;
    "InitKeySpace(address,bool)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddKey"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InitKeySpace"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type AddKeyEvent = TypedEvent<
  [string, boolean],
  { labelName: string; res: boolean }
>;

export type AddKeyEventFilter = TypedEventFilter<AddKeyEvent>;

export type InitKeySpaceEvent = TypedEvent<
  [string, boolean],
  { addr: string; res: boolean }
>;

export type InitKeySpaceEventFilter = TypedEventFilter<InitKeySpaceEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { _from: string; _to: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface DefaultEncrypt extends BaseContract {
  contractName: "DefaultEncrypt";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DefaultEncryptInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addKey(
      keyspace: string,
      addr: string,
      addr0: string,
      addrHash: BytesLike,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      id: string,
      kid: string,
      cryptoKey: string,
      labelName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addSplitKey(
      keyspace: string,
      addr: string,
      addr0: string,
      addrHash: BytesLike,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      id: string,
      kid0: string,
      kid1: string,
      cryptoKey: string,
      labelName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addable(overrides?: CallOverrides): Promise<[boolean]>;

    getKey(
      id: string,
      addr: string,
      addrHash: BytesLike,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getSplitKey(
      addr: string,
      addrHash: BytesLike,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      kid0: string,
      kid1: string,
      overrides?: CallOverrides
    ): Promise<[string, string]>;

    initKeySpace(
      addr: string,
      addr0: string,
      addrHash: BytesLike,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      randomNum: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isLabelExist(
      addr: string,
      addrHash: BytesLike,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      labelId: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    keySpace(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { startTime: BigNumber; updateTime: BigNumber }
    >;

    keySpaceExist(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    mask(overrides?: CallOverrides): Promise<[string]>;

    networkID(overrides?: CallOverrides): Promise<[BigNumber]>;

    nftMintable(overrides?: CallOverrides): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    seedToken(overrides?: CallOverrides): Promise<[string]>;

    setAddable(
      _addable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMask(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setNetworkId(
      _networkID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setNftMintable(
      value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTokenMintable(
      value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTreasury(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUpdateable(
      _updateadd: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    spaceExist(
      addr: string,
      addrHash: BytesLike,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    supportsInterface(
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    tokenMintable(overrides?: CallOverrides): Promise<[boolean]>;

    transferOwnership(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    treasury(overrides?: CallOverrides): Promise<[string]>;

    unstrictLabels(
      addr: string,
      addrHash: BytesLike,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    updateKey(
      addr: string,
      addrHash: BytesLike,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      label: string,
      labelId: string,
      cryptoKey: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateable(overrides?: CallOverrides): Promise<[boolean]>;

    withdraw(
      receiver: string,
      amount: BigNumberish,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addKey(
    keyspace: string,
    addr: string,
    addr0: string,
    addrHash: BytesLike,
    r: BytesLike,
    s: BytesLike,
    v: BigNumberish,
    id: string,
    kid: string,
    cryptoKey: string,
    labelName: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addSplitKey(
    keyspace: string,
    addr: string,
    addr0: string,
    addrHash: BytesLike,
    r: BytesLike,
    s: BytesLike,
    v: BigNumberish,
    id: string,
    kid0: string,
    kid1: string,
    cryptoKey: string,
    labelName: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addable(overrides?: CallOverrides): Promise<boolean>;

  getKey(
    id: string,
    addr: string,
    addrHash: BytesLike,
    r: BytesLike,
    s: BytesLike,
    v: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getSplitKey(
    addr: string,
    addrHash: BytesLike,
    r: BytesLike,
    s: BytesLike,
    v: BigNumberish,
    kid0: string,
    kid1: string,
    overrides?: CallOverrides
  ): Promise<[string, string]>;

  initKeySpace(
    addr: string,
    addr0: string,
    addrHash: BytesLike,
    r: BytesLike,
    s: BytesLike,
    v: BigNumberish,
    randomNum: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isLabelExist(
    addr: string,
    addrHash: BytesLike,
    r: BytesLike,
    s: BytesLike,
    v: BigNumberish,
    labelId: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  keySpace(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { startTime: BigNumber; updateTime: BigNumber }
  >;

  keySpaceExist(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  mask(overrides?: CallOverrides): Promise<string>;

  networkID(overrides?: CallOverrides): Promise<BigNumber>;

  nftMintable(overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  seedToken(overrides?: CallOverrides): Promise<string>;

  setAddable(
    _addable: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMask(
    addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setNetworkId(
    _networkID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setNftMintable(
    value: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTokenMintable(
    value: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTreasury(
    addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUpdateable(
    _updateadd: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  spaceExist(
    addr: string,
    addrHash: BytesLike,
    r: BytesLike,
    s: BytesLike,
    v: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  supportsInterface(
    interfaceID: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  tokenMintable(overrides?: CallOverrides): Promise<boolean>;

  transferOwnership(
    _owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  treasury(overrides?: CallOverrides): Promise<string>;

  unstrictLabels(
    addr: string,
    addrHash: BytesLike,
    r: BytesLike,
    s: BytesLike,
    v: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  updateKey(
    addr: string,
    addrHash: BytesLike,
    r: BytesLike,
    s: BytesLike,
    v: BigNumberish,
    label: string,
    labelId: string,
    cryptoKey: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateable(overrides?: CallOverrides): Promise<boolean>;

  withdraw(
    receiver: string,
    amount: BigNumberish,
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addKey(
      keyspace: string,
      addr: string,
      addr0: string,
      addrHash: BytesLike,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      id: string,
      kid: string,
      cryptoKey: string,
      labelName: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    addSplitKey(
      keyspace: string,
      addr: string,
      addr0: string,
      addrHash: BytesLike,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      id: string,
      kid0: string,
      kid1: string,
      cryptoKey: string,
      labelName: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addable(overrides?: CallOverrides): Promise<boolean>;

    getKey(
      id: string,
      addr: string,
      addrHash: BytesLike,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getSplitKey(
      addr: string,
      addrHash: BytesLike,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      kid0: string,
      kid1: string,
      overrides?: CallOverrides
    ): Promise<[string, string]>;

    initKeySpace(
      addr: string,
      addr0: string,
      addrHash: BytesLike,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      randomNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isLabelExist(
      addr: string,
      addrHash: BytesLike,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      labelId: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    keySpace(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { startTime: BigNumber; updateTime: BigNumber }
    >;

    keySpaceExist(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    mask(overrides?: CallOverrides): Promise<string>;

    networkID(overrides?: CallOverrides): Promise<BigNumber>;

    nftMintable(overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    seedToken(overrides?: CallOverrides): Promise<string>;

    setAddable(_addable: boolean, overrides?: CallOverrides): Promise<boolean>;

    setMask(addr: string, overrides?: CallOverrides): Promise<boolean>;

    setNetworkId(
      _networkID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setNftMintable(value: boolean, overrides?: CallOverrides): Promise<boolean>;

    setTokenMintable(
      value: boolean,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setTreasury(addr: string, overrides?: CallOverrides): Promise<boolean>;

    setUpdateable(
      _updateadd: boolean,
      overrides?: CallOverrides
    ): Promise<boolean>;

    spaceExist(
      addr: string,
      addrHash: BytesLike,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    supportsInterface(
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    tokenMintable(overrides?: CallOverrides): Promise<boolean>;

    transferOwnership(_owner: string, overrides?: CallOverrides): Promise<void>;

    treasury(overrides?: CallOverrides): Promise<string>;

    unstrictLabels(
      addr: string,
      addrHash: BytesLike,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    updateKey(
      addr: string,
      addrHash: BytesLike,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      label: string,
      labelId: string,
      cryptoKey: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    updateable(overrides?: CallOverrides): Promise<boolean>;

    withdraw(
      receiver: string,
      amount: BigNumberish,
      token: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "AddKey(string,bool)"(labelName?: null, res?: null): AddKeyEventFilter;
    AddKey(labelName?: null, res?: null): AddKeyEventFilter;

    "InitKeySpace(address,bool)"(
      addr?: null,
      res?: null
    ): InitKeySpaceEventFilter;
    InitKeySpace(addr?: null, res?: null): InitKeySpaceEventFilter;

    "OwnershipTransferred(address,address)"(
      _from?: string | null,
      _to?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      _from?: string | null,
      _to?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    addKey(
      keyspace: string,
      addr: string,
      addr0: string,
      addrHash: BytesLike,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      id: string,
      kid: string,
      cryptoKey: string,
      labelName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addSplitKey(
      keyspace: string,
      addr: string,
      addr0: string,
      addrHash: BytesLike,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      id: string,
      kid0: string,
      kid1: string,
      cryptoKey: string,
      labelName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addable(overrides?: CallOverrides): Promise<BigNumber>;

    getKey(
      id: string,
      addr: string,
      addrHash: BytesLike,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSplitKey(
      addr: string,
      addrHash: BytesLike,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      kid0: string,
      kid1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initKeySpace(
      addr: string,
      addr0: string,
      addrHash: BytesLike,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      randomNum: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isLabelExist(
      addr: string,
      addrHash: BytesLike,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      labelId: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    keySpace(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    keySpaceExist(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    mask(overrides?: CallOverrides): Promise<BigNumber>;

    networkID(overrides?: CallOverrides): Promise<BigNumber>;

    nftMintable(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    seedToken(overrides?: CallOverrides): Promise<BigNumber>;

    setAddable(
      _addable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMask(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setNetworkId(
      _networkID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setNftMintable(
      value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTokenMintable(
      value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTreasury(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setUpdateable(
      _updateadd: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    spaceExist(
      addr: string,
      addrHash: BytesLike,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenMintable(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;

    unstrictLabels(
      addr: string,
      addrHash: BytesLike,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateKey(
      addr: string,
      addrHash: BytesLike,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      label: string,
      labelId: string,
      cryptoKey: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateable(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      receiver: string,
      amount: BigNumberish,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addKey(
      keyspace: string,
      addr: string,
      addr0: string,
      addrHash: BytesLike,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      id: string,
      kid: string,
      cryptoKey: string,
      labelName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addSplitKey(
      keyspace: string,
      addr: string,
      addr0: string,
      addrHash: BytesLike,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      id: string,
      kid0: string,
      kid1: string,
      cryptoKey: string,
      labelName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getKey(
      id: string,
      addr: string,
      addrHash: BytesLike,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSplitKey(
      addr: string,
      addrHash: BytesLike,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      kid0: string,
      kid1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initKeySpace(
      addr: string,
      addr0: string,
      addrHash: BytesLike,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      randomNum: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isLabelExist(
      addr: string,
      addrHash: BytesLike,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      labelId: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    keySpace(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    keySpaceExist(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mask(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    networkID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nftMintable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    seedToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAddable(
      _addable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMask(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setNetworkId(
      _networkID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setNftMintable(
      value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTokenMintable(
      value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTreasury(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUpdateable(
      _updateadd: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    spaceExist(
      addr: string,
      addrHash: BytesLike,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenMintable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unstrictLabels(
      addr: string,
      addrHash: BytesLike,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateKey(
      addr: string,
      addrHash: BytesLike,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      label: string,
      labelId: string,
      cryptoKey: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      receiver: string,
      amount: BigNumberish,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
