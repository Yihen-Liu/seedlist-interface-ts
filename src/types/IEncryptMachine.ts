/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface IEncryptMachineInterface extends utils.Interface {
  contractName: "IEncryptMachine";
  functions: {
    "addKey(address,address,address,bytes32,bytes32,bytes32,uint8,address,address,string,string)": FunctionFragment;
    "getKey(address,address,bytes32,bytes32,bytes32,uint8)": FunctionFragment;
    "initKeySpace(address,address,bytes32,bytes32,bytes32,uint8,uint256)": FunctionFragment;
    "isLabelExist(address,bytes32,bytes32,bytes32,uint8,address)": FunctionFragment;
    "spaceExist(address,bytes32,bytes32,bytes32,uint8)": FunctionFragment;
    "unstrictLabels(address,bytes32,bytes32,bytes32,uint8)": FunctionFragment;
    "withdraw(address,uint256,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addKey",
    values: [
      string,
      string,
      string,
      BytesLike,
      BytesLike,
      BytesLike,
      BigNumberish,
      string,
      string,
      string,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getKey",
    values: [string, string, BytesLike, BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initKeySpace",
    values: [
      string,
      string,
      BytesLike,
      BytesLike,
      BytesLike,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isLabelExist",
    values: [string, BytesLike, BytesLike, BytesLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "spaceExist",
    values: [string, BytesLike, BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unstrictLabels",
    values: [string, BytesLike, BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, BigNumberish, string]
  ): string;

  decodeFunctionResult(functionFragment: "addKey", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getKey", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initKeySpace",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isLabelExist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "spaceExist", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unstrictLabels",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "AddKey(string,bool)": EventFragment;
    "InitKeySpace(address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddKey"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InitKeySpace"): EventFragment;
}

export type AddKeyEvent = TypedEvent<
  [string, boolean],
  { labelName: string; res: boolean }
>;

export type AddKeyEventFilter = TypedEventFilter<AddKeyEvent>;

export type InitKeySpaceEvent = TypedEvent<
  [string, boolean],
  { addr: string; res: boolean }
>;

export type InitKeySpaceEventFilter = TypedEventFilter<InitKeySpaceEvent>;

export interface IEncryptMachine extends BaseContract {
  contractName: "IEncryptMachine";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IEncryptMachineInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addKey(
      keyspace: string,
      addr: string,
      addr0: string,
      addrHash: BytesLike,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      id: string,
      kid: string,
      cryptoKey: string,
      labelName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getKey(
      kid: string,
      addr: string,
      addrHash: BytesLike,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    initKeySpace(
      addr: string,
      addr0: string,
      addrHash: BytesLike,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      randomNum: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isLabelExist(
      addr: string,
      addrHash: BytesLike,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      labelId: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    spaceExist(
      addr: string,
      addrHash: BytesLike,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    unstrictLabels(
      addr: string,
      addrHash: BytesLike,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    withdraw(
      receiver: string,
      amount: BigNumberish,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addKey(
    keyspace: string,
    addr: string,
    addr0: string,
    addrHash: BytesLike,
    r: BytesLike,
    s: BytesLike,
    v: BigNumberish,
    id: string,
    kid: string,
    cryptoKey: string,
    labelName: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getKey(
    kid: string,
    addr: string,
    addrHash: BytesLike,
    r: BytesLike,
    s: BytesLike,
    v: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  initKeySpace(
    addr: string,
    addr0: string,
    addrHash: BytesLike,
    r: BytesLike,
    s: BytesLike,
    v: BigNumberish,
    randomNum: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isLabelExist(
    addr: string,
    addrHash: BytesLike,
    r: BytesLike,
    s: BytesLike,
    v: BigNumberish,
    labelId: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  spaceExist(
    addr: string,
    addrHash: BytesLike,
    r: BytesLike,
    s: BytesLike,
    v: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  unstrictLabels(
    addr: string,
    addrHash: BytesLike,
    r: BytesLike,
    s: BytesLike,
    v: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  withdraw(
    receiver: string,
    amount: BigNumberish,
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addKey(
      keyspace: string,
      addr: string,
      addr0: string,
      addrHash: BytesLike,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      id: string,
      kid: string,
      cryptoKey: string,
      labelName: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getKey(
      kid: string,
      addr: string,
      addrHash: BytesLike,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    initKeySpace(
      addr: string,
      addr0: string,
      addrHash: BytesLike,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      randomNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isLabelExist(
      addr: string,
      addrHash: BytesLike,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      labelId: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    spaceExist(
      addr: string,
      addrHash: BytesLike,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    unstrictLabels(
      addr: string,
      addrHash: BytesLike,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    withdraw(
      receiver: string,
      amount: BigNumberish,
      token: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "AddKey(string,bool)"(labelName?: null, res?: null): AddKeyEventFilter;
    AddKey(labelName?: null, res?: null): AddKeyEventFilter;

    "InitKeySpace(address,bool)"(
      addr?: null,
      res?: null
    ): InitKeySpaceEventFilter;
    InitKeySpace(addr?: null, res?: null): InitKeySpaceEventFilter;
  };

  estimateGas: {
    addKey(
      keyspace: string,
      addr: string,
      addr0: string,
      addrHash: BytesLike,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      id: string,
      kid: string,
      cryptoKey: string,
      labelName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getKey(
      kid: string,
      addr: string,
      addrHash: BytesLike,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initKeySpace(
      addr: string,
      addr0: string,
      addrHash: BytesLike,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      randomNum: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isLabelExist(
      addr: string,
      addrHash: BytesLike,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      labelId: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    spaceExist(
      addr: string,
      addrHash: BytesLike,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unstrictLabels(
      addr: string,
      addrHash: BytesLike,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      receiver: string,
      amount: BigNumberish,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addKey(
      keyspace: string,
      addr: string,
      addr0: string,
      addrHash: BytesLike,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      id: string,
      kid: string,
      cryptoKey: string,
      labelName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getKey(
      kid: string,
      addr: string,
      addrHash: BytesLike,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initKeySpace(
      addr: string,
      addr0: string,
      addrHash: BytesLike,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      randomNum: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isLabelExist(
      addr: string,
      addrHash: BytesLike,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      labelId: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    spaceExist(
      addr: string,
      addrHash: BytesLike,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unstrictLabels(
      addr: string,
      addrHash: BytesLike,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      receiver: string,
      amount: BigNumberish,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
