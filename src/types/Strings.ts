/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface StringsInterface extends utils.Interface {
  contractName: "Strings";
  functions: {
    "addressToAsciiString(address)": FunctionFragment;
    "bytes32ToBytes(bytes32)": FunctionFragment;
    "char(bytes1)": FunctionFragment;
    "fromAddress(address)": FunctionFragment;
    "fromBytes(bytes)": FunctionFragment;
    "fromBytes32(bytes32)": FunctionFragment;
    "toBytes(string)": FunctionFragment;
    "toBytes32(string)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addressToAsciiString",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "bytes32ToBytes",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "char", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "fromAddress", values: [string]): string;
  encodeFunctionData(
    functionFragment: "fromBytes",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "fromBytes32",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "toBytes", values: [string]): string;
  encodeFunctionData(functionFragment: "toBytes32", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "addressToAsciiString",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bytes32ToBytes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "char", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fromAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fromBytes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fromBytes32",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "toBytes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toBytes32", data: BytesLike): Result;

  events: {};
}

export interface Strings extends BaseContract {
  contractName: "Strings";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StringsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addressToAsciiString(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    bytes32ToBytes(
      _bytes32: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    char(
      b: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { c: string }>;

    fromAddress(_address: string, overrides?: CallOverrides): Promise<[string]>;

    fromBytes(_bytes: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    fromBytes32(
      _bytes32: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    toBytes(str: string, overrides?: CallOverrides): Promise<[string]>;

    toBytes32(
      source: string,
      overrides?: CallOverrides
    ): Promise<[string] & { result: string }>;
  };

  addressToAsciiString(
    _address: string,
    overrides?: CallOverrides
  ): Promise<string>;

  bytes32ToBytes(
    _bytes32: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  char(b: BytesLike, overrides?: CallOverrides): Promise<string>;

  fromAddress(_address: string, overrides?: CallOverrides): Promise<string>;

  fromBytes(_bytes: BytesLike, overrides?: CallOverrides): Promise<string>;

  fromBytes32(_bytes32: BytesLike, overrides?: CallOverrides): Promise<string>;

  toBytes(str: string, overrides?: CallOverrides): Promise<string>;

  toBytes32(source: string, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    addressToAsciiString(
      _address: string,
      overrides?: CallOverrides
    ): Promise<string>;

    bytes32ToBytes(
      _bytes32: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    char(b: BytesLike, overrides?: CallOverrides): Promise<string>;

    fromAddress(_address: string, overrides?: CallOverrides): Promise<string>;

    fromBytes(_bytes: BytesLike, overrides?: CallOverrides): Promise<string>;

    fromBytes32(
      _bytes32: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    toBytes(str: string, overrides?: CallOverrides): Promise<string>;

    toBytes32(source: string, overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    addressToAsciiString(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bytes32ToBytes(
      _bytes32: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    char(b: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    fromAddress(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fromBytes(_bytes: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    fromBytes32(
      _bytes32: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toBytes(str: string, overrides?: CallOverrides): Promise<BigNumber>;

    toBytes32(source: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addressToAsciiString(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bytes32ToBytes(
      _bytes32: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    char(
      b: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fromAddress(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fromBytes(
      _bytes: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fromBytes32(
      _bytes32: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toBytes(
      str: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toBytes32(
      source: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
