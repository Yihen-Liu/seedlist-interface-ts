/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Worker, WorkerInterface } from "../../../src/validator/Worker";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "run",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060c18061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063522bb70414602d575b600080fd5b603c60383660046086565b6050565b604051901515815260200160405180910390f35b60006001600160a01b03821673b1799e2ccb10e4a8386e17474363a2be8e33cdfb1415607e57506001919050565b506000919050565b600060208284031215609757600080fd5b81356001600160a01b038116811460ad57600080fd5b939250505056fea164736f6c634300080c000a";

type WorkerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: WorkerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Worker__factory extends ContractFactory {
  constructor(...args: WorkerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Worker> {
    return super.deploy(overrides || {}) as Promise<Worker>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Worker {
    return super.attach(address) as Worker;
  }
  override connect(signer: Signer): Worker__factory {
    return super.connect(signer) as Worker__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): WorkerInterface {
    return new utils.Interface(_abi) as WorkerInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Worker {
    return new Contract(address, _abi, signerOrProvider) as Worker;
  }
}
