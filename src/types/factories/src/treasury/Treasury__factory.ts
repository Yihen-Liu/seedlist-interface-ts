/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  Treasury,
  TreasuryInterface,
} from "../../../src/treasury/Treasury";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_seed",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "callable",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "caller",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "cycle",
    outputs: [
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
    ],
    name: "mint",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "seedToken",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_caller",
        type: "address",
      },
    ],
    name: "setCaller",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "receiver",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdrawETH",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x60806040526a131b9d825c4aa46d8000006003556871d75ab9b920500000600455680b6255df5f500800006005556006805461ffff1916905534801561004457600080fd5b506040516109ad3803806109ad8339810160408190526100639161009e565b600280546001600160a01b039092166001600160a01b031992831617905560008054909116331790556001805460ff60a01b191690556100ce565b6000602082840312156100b057600080fd5b81516001600160a01b03811681146100c757600080fd5b9392505050565b6108d0806100dd6000396000f3fe6080604052600436106100955760003560e01c80638da5cb5b116100595780638da5cb5b1461017d578063beb92f551461019d578063d9caed12146101bf578063f2fde38b146101df578063fc9c8d39146101ff57600080fd5b8063311f8483146100a15780634782f779146100de5780636190c9d51461010e5780636a2ab6021461013c5780636a6278421461015d57600080fd5b3661009c57005b600080fd5b3480156100ad57600080fd5b506002546100c1906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156100ea57600080fd5b506100fe6100f936600461076a565b61021f565b60405190151581526020016100d5565b34801561011a57600080fd5b506006546101299061ffff1681565b60405161ffff90911681526020016100d5565b34801561014857600080fd5b506001546100fe90600160a01b900460ff1681565b34801561016957600080fd5b506100fe610178366004610796565b610293565b34801561018957600080fd5b506000546100c1906001600160a01b031681565b3480156101a957600080fd5b506101bd6101b8366004610796565b610558565b005b3480156101cb57600080fd5b506100fe6101da3660046107ba565b6105a9565b3480156101eb57600080fd5b506101bd6101fa366004610796565b6106b7565b34801561020b57600080fd5b506001546100c1906001600160a01b031681565b600080546001600160a01b031633146102535760405162461bcd60e51b815260040161024a906107fb565b60405180910390fd5b6040516001600160a01b0384169083156108fc029084906000818181858888f19350505050158015610289573d6000803e3d6000fd5b5060019392505050565b60018054600091600160a01b90910460ff161515146102f45760405162461bcd60e51b815260206004820152601b60248201527f54726561737572793a2063616c6c657220697320696e76616c69640000000000604482015260640161024a565b6001546001600160a01b0316331461034e5760405162461bcd60e51b815260206004820152601c60248201527f54726561737572793a206f6e6c792063616c6c65722063616e20646f00000000604482015260640161024a565b600254604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd9160048083019260209291908290030181865afa158015610398573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103bc9190610832565b60065460035491925061ffff16906103d4908361084b565b1115610403576006546103ec9061ffff16600161086d565b6006805461ffff191661ffff929092169190911790555b60065460055461ffff9091161c6104525760405162461bcd60e51b8152602060048201526013602482015272054726561737572793a206d696e742073746f7606c1b604482015260640161024a565b6002546006546005546040516340c10f1960e01b815230600482015261ffff9092161c60248201526001600160a01b03909116906340c10f19906044016020604051808303816000875af11580156104ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d291906108a1565b50600254600654600480546040516340c10f1960e01b81526001600160a01b038881169382019390935261ffff9093161c6024830152909116906340c10f19906044016020604051808303816000875af1158015610534573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061028991906108a1565b6000546001600160a01b031633146105825760405162461bcd60e51b815260040161024a906107fb565b600180546001600160a81b0319166001600160a01b0390921691909117600160a01b179055565b600080546001600160a01b031633146105d45760405162461bcd60e51b815260040161024a906107fb565b6001600160a01b038416158015906105f457506001600160a01b03831615155b6106395760405162461bcd60e51b815260206004820152601660248201527554726561737572793a205a45524f204144445245535360501b604482015260640161024a565b60405163a9059cbb60e01b81526001600160a01b0385811660048301526024820184905284169063a9059cbb906044016020604051808303816000875af1158015610688573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ac91906108a1565b506001949350505050565b6000546001600160a01b031633146106e15760405162461bcd60e51b815260040161024a906107fb565b6001600160a01b0381166107305760405162461bcd60e51b815260206004820152601660248201527554726561737572793a205a45524f204144445245535360501b604482015260640161024a565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b038116811461076757600080fd5b50565b6000806040838503121561077d57600080fd5b823561078881610752565b946020939093013593505050565b6000602082840312156107a857600080fd5b81356107b381610752565b9392505050565b6000806000606084860312156107cf57600080fd5b83356107da81610752565b925060208401356107ea81610752565b929592945050506040919091013590565b6020808252601b908201527f54726561737572793a206f6e6c79206f776e65722063616e20646f0000000000604082015260600190565b60006020828403121561084457600080fd5b5051919050565b60008261086857634e487b7160e01b600052601260045260246000fd5b500490565b600061ffff80831681851680830382111561089857634e487b7160e01b600052601160045260246000fd5b01949350505050565b6000602082840312156108b357600080fd5b815180151581146107b357600080fdfea164736f6c634300080c000a";

type TreasuryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TreasuryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Treasury__factory extends ContractFactory {
  constructor(...args: TreasuryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _seed: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Treasury> {
    return super.deploy(_seed, overrides || {}) as Promise<Treasury>;
  }
  override getDeployTransaction(
    _seed: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_seed, overrides || {});
  }
  override attach(address: string): Treasury {
    return super.attach(address) as Treasury;
  }
  override connect(signer: Signer): Treasury__factory {
    return super.connect(signer) as Treasury__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TreasuryInterface {
    return new utils.Interface(_abi) as TreasuryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Treasury {
    return new Contract(address, _abi, signerOrProvider) as Treasury;
  }
}
