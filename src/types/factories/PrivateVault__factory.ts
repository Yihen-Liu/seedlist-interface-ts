/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PrivateVault, PrivateVaultInterface } from "../PrivateVault";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_signer",
        type: "address",
      },
      {
        internalType: "address",
        name: "_caller",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "index",
        type: "uint16",
      },
    ],
    name: "getLabelByIndex",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
    ],
    name: "getLabelByName",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "minted",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "data",
        type: "string",
      },
      {
        internalType: "string",
        name: "cryptoLabel",
        type: "string",
      },
    ],
    name: "saveWithMinting",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "data",
        type: "string",
      },
      {
        internalType: "string",
        name: "cryptoLabel",
        type: "string",
      },
    ],
    name: "saveWithoutMinting",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "total",
    outputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051610c48380380610c4883398101604081905261002f91610093565b600080546001600160a01b039384166001600160a01b031990911617905560018054600580546001600160401b03191690556001600160a81b031916919092161790556100c6565b80516001600160a01b038116811461008e57600080fd5b919050565b600080604083850312156100a657600080fd5b6100af83610077565b91506100bd60208401610077565b90509250929050565b610b73806100d56000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c80632ddbd13a116100505780632ddbd13a146100c85780632ebc2fcb146100f55780634f02c4201461010857600080fd5b80630681f4f4146100775780631bcbb1fe146100a057806322966799146100b5575b600080fd5b61008a61008536600461086b565b61012c565b60405161009791906108c6565b60405180910390f35b6100b36100ae36600461099c565b6102dd565b005b6100b36100c336600461099c565b61050b565b6005546100dc9067ffffffffffffffff1681565b60405167ffffffffffffffff9091168152602001610097565b61008a610103366004610a00565b6106b0565b60015461011c90600160a01b900460ff1681565b6040519015158152602001610097565b6001546060906001600160a01b031633148061015257506000546001600160a01b031633145b6101975760405162461bcd60e51b815260206004820152601160248201527010d85b1b195c881a5cc81a5b9d985b1a59607a1b60448201526064015b60405180910390fd5b60055461ffff831667ffffffffffffffff909116116101f85760405162461bcd60e51b815260206004820152601460248201527f4c6162656c73206b657973206f766572666c6f77000000000000000000000000604482015260640161018e565b61ffff82166000908152600360209081526040808320905161021a9201610a78565b60408051601f1981840301815291815281516020928301206001600160a01b03811660009081526004909352912080549192509061025790610a3d565b80601f016020809104026020016040519081016040528092919081815260200182805461028390610a3d565b80156102d05780601f106102a5576101008083540402835291602001916102d0565b820191906000526020600020905b8154815290600101906020018083116102b357829003601f168201915b5050505050915050919050565b6001546001600160a01b031633148061030057506000546001600160a01b031633145b6103405760405162461bcd60e51b815260206004820152601160248201527010d85b1b195c881a5cc81a5b9d985b1a59607a1b604482015260640161018e565b600154600160a01b900460ff161561039a5760405162461bcd60e51b815260206004820152601760248201527f736565646c6973743a206d696e742068617320646f6e65000000000000000000604482015260640161018e565b6000816040516020016103ad9190610b14565b60408051601f1981840301815291815281516020928301206001600160a01b0381166000908152600290935291205490915060ff16156104215760405162461bcd60e51b815260206004820152600f60248201526e131858995b081a185cc8195e1a5cdd608a1b604482015260640161018e565b6001600160a01b0381166000908152600460209081526040909120845161044a928601906107d2565b5060055467ffffffffffffffff1660009081526003602090815260409091208351610477928501906107d2565b506005805467ffffffffffffffff1690600061049283610b30565b825467ffffffffffffffff9182166101009390930a9283029190920219909116179055506001600160a01b03166000908152600260205260409020805460ff1916600190811790915580547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16600160a01b1790555050565b6001546001600160a01b031633148061052e57506000546001600160a01b031633145b61056e5760405162461bcd60e51b815260206004820152601160248201527010d85b1b195c881a5cc81a5b9d985b1a59607a1b604482015260640161018e565b6000816040516020016105819190610b14565b60408051601f1981840301815291815281516020928301206001600160a01b0381166000908152600290935291205490915060ff16156105f55760405162461bcd60e51b815260206004820152600f60248201526e131858995b081a185cc8195e1a5cdd608a1b604482015260640161018e565b6001600160a01b0381166000908152600460209081526040909120845161061e928601906107d2565b5060055467ffffffffffffffff166000908152600360209081526040909120835161064b928501906107d2565b506005805467ffffffffffffffff1690600061066683610b30565b825467ffffffffffffffff9182166101009390930a9283029190920219909116179055506001600160a01b03166000908152600260205260409020805460ff191660011790555050565b6001546060906001600160a01b03163314806106d657506000546001600160a01b031633145b6107165760405162461bcd60e51b815260206004820152601160248201527010d85b1b195c881a5cc81a5b9d985b1a59607a1b604482015260640161018e565b6000826040516020016107299190610b14565b60408051601f1981840301815291815281516020928301206001600160a01b0381166000908152600290935291205490915060ff1615156001146107af5760405162461bcd60e51b815260206004820152600e60248201527f4c6162656c206e6f206578697374000000000000000000000000000000000000604482015260640161018e565b6001600160a01b0381166000908152600460205260409020805461025790610a3d565b8280546107de90610a3d565b90600052602060002090601f0160209004810192826108005760008555610846565b82601f1061081957805160ff1916838001178555610846565b82800160010185558215610846579182015b8281111561084657825182559160200191906001019061082b565b50610852929150610856565b5090565b5b808211156108525760008155600101610857565b60006020828403121561087d57600080fd5b813561ffff8116811461088f57600080fd5b9392505050565b60005b838110156108b1578181015183820152602001610899565b838111156108c0576000848401525b50505050565b60208152600082518060208401526108e5816040850160208701610896565b601f01601f19169190910160400192915050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261092057600080fd5b813567ffffffffffffffff8082111561093b5761093b6108f9565b604051601f8301601f19908116603f01168101908282118183101715610963576109636108f9565b8160405283815286602085880101111561097c57600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080604083850312156109af57600080fd5b823567ffffffffffffffff808211156109c757600080fd5b6109d38683870161090f565b935060208501359150808211156109e957600080fd5b506109f68582860161090f565b9150509250929050565b600060208284031215610a1257600080fd5b813567ffffffffffffffff811115610a2957600080fd5b610a358482850161090f565b949350505050565b600181811c90821680610a5157607f821691505b60208210811415610a7257634e487b7160e01b600052602260045260246000fd5b50919050565b600080835481600182811c915080831680610a9457607f831692505b6020808410821415610ab457634e487b7160e01b86526022600452602486fd5b818015610ac85760018114610ad957610b06565b60ff19861689528489019650610b06565b60008a81526020902060005b86811015610afe5781548b820152908501908301610ae5565b505084890196505b509498975050505050505050565b60008251610b26818460208701610896565b9190910192915050565b600067ffffffffffffffff80831681811415610b5c57634e487b7160e01b600052601160045260246000fd5b600101939250505056fea164736f6c634300080c000a";

type PrivateVaultConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PrivateVaultConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class PrivateVault__factory extends ContractFactory {
  constructor(...args: PrivateVaultConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _signer: string,
    _caller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<PrivateVault> {
    return super.deploy(
      _signer,
      _caller,
      overrides || {}
    ) as Promise<PrivateVault>;
  }
  override getDeployTransaction(
    _signer: string,
    _caller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_signer, _caller, overrides || {});
  }
  override attach(address: string): PrivateVault {
    return super.attach(address) as PrivateVault;
  }
  override connect(signer: Signer): PrivateVault__factory {
    return super.connect(signer) as PrivateVault__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PrivateVaultInterface {
    return new utils.Interface(_abi) as PrivateVaultInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PrivateVault {
    return new Contract(address, _abi, signerOrProvider) as PrivateVault;
  }
}
