/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Permission, PermissionInterface } from "../Permission";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "_to",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "addable",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "networkID",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "nftMintable",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "_addable",
        type: "bool",
      },
    ],
    name: "setAddable",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_networkID",
        type: "uint256",
      },
    ],
    name: "setNetworkId",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "value",
        type: "bool",
      },
    ],
    name: "setNftMintable",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "value",
        type: "bool",
      },
    ],
    name: "setTokenMintable",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "_updateadd",
        type: "bool",
      },
    ],
    name: "setUpdateable",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "tokenMintable",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "updateable",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60806040526000805463ffffffff60a01b1916630101010160a01b1790556001805534801561002d57600080fd5b5061044c8061003d6000396000f3fe608060405234801561001057600080fd5b50600436106100d45760003560e01c8063ae198aba11610081578063f2fde38b1161005b578063f2fde38b146101b8578063f6778eb9146101cd578063f67bbbf7146101e357600080fd5b8063ae198aba1461017a578063bab161bf1461018e578063f281e5ff146101a557600080fd5b806379c0886c116100b257806379c0886c146101275780638da5cb5b1461013b578063983586d91461016657600080fd5b806340d1207d146100d957806358951c68146101015780637032052714610114575b600080fd5b6100ec6100e73660046103d4565b6101f7565b60405190151581526020015b60405180910390f35b6100ec61010f3660046103d4565b61024b565b6100ec6101223660046103d4565b61029f565b6000546100ec90600160a01b900460ff1681565b60005461014e906001600160a01b031681565b6040516001600160a01b0390911681526020016100f8565b6000546100ec90600160a81b900460ff1681565b6000546100ec90600160b01b900460ff1681565b61019760015481565b6040519081526020016100f8565b6100ec6101b33660046103d4565b6102f3565b6101cb6101c63660046103fd565b610347565b005b6100ec6101db366004610426565b600190815590565b6000546100ec90600160b81b900460ff1681565b600080546001600160a01b0316331461020f57600080fd5b5060008054821515600160b81b027fffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffff9091161790556001919050565b600080546001600160a01b0316331461026357600080fd5b5060008054821515600160a81b027fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff9091161790556001919050565b600080546001600160a01b031633146102b757600080fd5b5060008054821515600160a01b027fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff9091161790556001919050565b600080546001600160a01b0316331461030b57600080fd5b5060008054821515600160b01b027fffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffff9091161790556001919050565b6000546001600160a01b0316331461035e57600080fd5b6001600160a01b03811661037157600080fd5b600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0383169081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a350565b6000602082840312156103e657600080fd5b813580151581146103f657600080fd5b9392505050565b60006020828403121561040f57600080fd5b81356001600160a01b03811681146103f657600080fd5b60006020828403121561043857600080fd5b503591905056fea164736f6c634300080c000a";

type PermissionConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PermissionConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Permission__factory extends ContractFactory {
  constructor(...args: PermissionConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Permission";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Permission> {
    return super.deploy(overrides || {}) as Promise<Permission>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Permission {
    return super.attach(address) as Permission;
  }
  connect(signer: Signer): Permission__factory {
    return super.connect(signer) as Permission__factory;
  }
  static readonly contractName: "Permission";
  public readonly contractName: "Permission";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PermissionInterface {
    return new utils.Interface(_abi) as PermissionInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Permission {
    return new Contract(address, _abi, signerOrProvider) as Permission;
  }
}
