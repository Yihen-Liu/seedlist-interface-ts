/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Registry, RegistryInterface } from "../Registry";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "version",
        type: "string",
      },
    ],
    name: "getEncryptMachine",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "machine",
        type: "address",
      },
    ],
    name: "machineHasRegister",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "version",
        type: "string",
      },
      {
        internalType: "address",
        name: "machine",
        type: "address",
      },
    ],
    name: "registryEncryptMachine",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "version",
        type: "string",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "setMachineOwner",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "version",
        type: "string",
      },
      {
        internalType: "address",
        name: "machine",
        type: "address",
      },
    ],
    name: "updateEncryptMachine",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "version",
        type: "string",
      },
    ],
    name: "versionHasRegister",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60a060405234801561001057600080fd5b50600162c1c72960e01b0319608052608051610b1861003a60003960006108110152610b186000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c80638307e962116100505780638307e962146100c55780639343d3cc146100d8578063e9620e611461010357600080fd5b80632ec6273c146100775780633550c1a01461009f5780638013e31e146100b2575b600080fd5b61008a610085366004610959565b610116565b60405190151581526020015b60405180910390f35b61008a6100ad366004610a1e565b610192565b61008a6100c0366004610a1e565b6102a2565b61008a6100d3366004610a1e565b6103e3565b6100eb6100e6366004610a6c565b6105c9565b6040516001600160a01b039091168152602001610096565b61008a610111366004610a6c565b61064a565b60006001600160a01b0382166101735760405162461bcd60e51b815260206004820152601860248201527f206d616368696e652061646472657373206973206e756c6c000000000000000060448201526064015b60405180910390fd5b506001600160a01b031660009081526001602052604090205460ff1690565b60008083511180156101ac57506001600160a01b03821615155b6101f85760405162461bcd60e51b815260206004820152601e60248201527f757064617465206d616368696e653a20706172616d7320696e76616c69640000604482015260640161016a565b336001600160a01b03166002600080866040516102159190610ad9565b9081526040805160209281900383019020546001600160a01b03908116845291830193909352910160002054161461024c57600080fd5b8160008460405161025d9190610ad9565b90815260405190819003602001902080546001600160a01b039290921673ffffffffffffffffffffffffffffffffffffffff1990921691909117905550600192915050565b6000806001600160a01b03166000846040516102be9190610ad9565b908152604051908190036020019020546001600160a01b03161480159061032c5750336001600160a01b03166002600080866040516102fd9190610ad9565b9081526040805160209281900383019020546001600160a01b0390811684529183019390935291016000205416145b6103785760405162461bcd60e51b815260206004820152601960248201527f736574206f776e65723a6175746820697320696e76616c696400000000000000604482015260640161016a565b8160026000808660405161038c9190610ad9565b9081526040805160209281900383019020546001600160a01b039081168452918301939093529101600020805473ffffffffffffffffffffffffffffffffffffffff19169290911691909117905550600192915050565b60008083511180156103fd57506001600160a01b03821615155b6104495760405162461bcd60e51b815260206004820152601560248201527f726567697374727920706172616d73206572726f720000000000000000000000604482015260640161016a565b60006001600160a01b03166000846040516104649190610ad9565b908152604051908190036020019020546001600160a01b03161480156104a357506001600160a01b03821660009081526001602052604090205460ff16155b6104ef5760405162461bcd60e51b815260206004820152601a60248201527f656e6372797074206d616368696e652068617320657869737473000000000000604482015260640161016a565b6104f8826106d8565b15156001146105495760405162461bcd60e51b815260206004820181905260248201527f646f6e7420696d706c656d656e7420656e637279707420696e74657266616365604482015260640161016a565b8160008460405161055a9190610ad9565b9081526040805191829003602090810190922080546001600160a01b0394851673ffffffffffffffffffffffffffffffffffffffff199182161790915592851660009081526001808452828220805460ff19168217905560029093522080549092163317909155905092915050565b60008082511161061b5760405162461bcd60e51b815260206004820181905260248201527f67657420656e6372797074206d616368696e653a2076657273696f6e20657272604482015260640161016a565b60008260405161062b9190610ad9565b908152604051908190036020019020546001600160a01b031692915050565b60008082511161069c5760405162461bcd60e51b815260206004820152600f60248201527f76657273696f6e206973206e756c6c0000000000000000000000000000000000604482015260640161016a565b60006001600160a01b03166000836040516106b79190610ad9565b908152604051908190036020019020546001600160a01b0316141592915050565b6040516301ffc9a760e01b6024820152600090819081906001600160a01b0385169060440160408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166301ffc9a760e01b179052516107479190610ad9565b600060405180830381855afa9150503d8060008114610782576040519150601f19603f3d011682016040523d82523d6000602084013e610787565b606091505b509150915081158061079a575060208151105b806107dc575080601f815181106107b3576107b3610af5565b01602001517fff0000000000000000000000000000000000000000000000000000000000000016155b156107eb575060009392505050565b6040517fffffffff000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000001660248201526001600160a01b0385169060440160408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166301ffc9a760e01b1790525161088e9190610ad9565b600060405180830381855afa9150503d80600081146108c9576040519150601f19603f3d011682016040523d82523d6000602084013e6108ce565b606091505b5090925090508115806108e2575060208151105b80610924575080601f815181106108fb576108fb610af5565b01602001517fff0000000000000000000000000000000000000000000000000000000000000016155b15610933575060009392505050565b5060019392505050565b80356001600160a01b038116811461095457600080fd5b919050565b60006020828403121561096b57600080fd5b6109748261093d565b9392505050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126109a257600080fd5b813567ffffffffffffffff808211156109bd576109bd61097b565b604051601f8301601f19908116603f011681019082821181831017156109e5576109e561097b565b816040528381528660208588010111156109fe57600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060408385031215610a3157600080fd5b823567ffffffffffffffff811115610a4857600080fd5b610a5485828601610991565b925050610a636020840161093d565b90509250929050565b600060208284031215610a7e57600080fd5b813567ffffffffffffffff811115610a9557600080fd5b610aa184828501610991565b949350505050565b60005b83811015610ac4578181015183820152602001610aac565b83811115610ad3576000848401525b50505050565b60008251610aeb818460208701610aa9565b9190910192915050565b634e487b7160e01b600052603260045260246000fdfea164736f6c634300080c000a";

type RegistryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RegistryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Registry__factory extends ContractFactory {
  constructor(...args: RegistryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Registry";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Registry> {
    return super.deploy(overrides || {}) as Promise<Registry>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Registry {
    return super.attach(address) as Registry;
  }
  connect(signer: Signer): Registry__factory {
    return super.connect(signer) as Registry__factory;
  }
  static readonly contractName: "Registry";
  public readonly contractName: "Registry";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RegistryInterface {
    return new utils.Interface(_abi) as RegistryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Registry {
    return new Contract(address, _abi, signerOrProvider) as Registry;
  }
}
