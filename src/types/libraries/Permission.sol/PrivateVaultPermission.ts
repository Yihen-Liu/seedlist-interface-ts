/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface PrivateVaultPermissionInterface extends utils.Interface {
  functions: {
    "getPrivateDataByIndexPermit(address,uint64,uint256,uint8,bytes32,bytes32,bytes32)": FunctionFragment;
    "getPrivateDataByNamePermit(address,address,uint256,uint8,bytes32,bytes32,bytes32)": FunctionFragment;
    "labelIsExistPermit(address,address,uint256,uint8,bytes32,bytes32,bytes32)": FunctionFragment;
    "labelNamePermit(address,uint64,uint256,uint8,bytes32,bytes32,bytes32)": FunctionFragment;
    "saveWithoutMintingPermit(address,string,string,bytes,address,uint256,uint8,bytes32,bytes32,bytes32)": FunctionFragment;
    "updateValidatorPermit(address,address,uint256,uint8,bytes32,bytes32,bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getPrivateDataByIndexPermit"
      | "getPrivateDataByNamePermit"
      | "labelIsExistPermit"
      | "labelNamePermit"
      | "saveWithoutMintingPermit"
      | "updateValidatorPermit"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getPrivateDataByIndexPermit",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrivateDataByNamePermit",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "labelIsExistPermit",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "labelNamePermit",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "saveWithoutMintingPermit",
    values: [
      string,
      string,
      string,
      BytesLike,
      string,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateValidatorPermit",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike,
      BytesLike
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "getPrivateDataByIndexPermit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPrivateDataByNamePermit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "labelIsExistPermit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "labelNamePermit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "saveWithoutMintingPermit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateValidatorPermit",
    data: BytesLike
  ): Result;

  events: {};
}

export interface PrivateVaultPermission extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PrivateVaultPermissionInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getPrivateDataByIndexPermit(
      addr: string,
      index: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      DOMAIN_SEPARATOR: BytesLike,
      overrides?: CallOverrides
    ): Promise<[void]>;

    getPrivateDataByNamePermit(
      addr: string,
      name: string,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      DOMAIN_SEPARATOR: BytesLike,
      overrides?: CallOverrides
    ): Promise<[void]>;

    labelIsExistPermit(
      addr: string,
      labelHash: string,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      DOMAIN_SEPARATOR: BytesLike,
      overrides?: CallOverrides
    ): Promise<[void]>;

    labelNamePermit(
      addr: string,
      index: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      DOMAIN_SEPARATOR: BytesLike,
      overrides?: CallOverrides
    ): Promise<[void]>;

    saveWithoutMintingPermit(
      addr: string,
      data: string,
      cryptoLabel: string,
      _params: BytesLike,
      labelHash: string,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      DOMAIN_SEPARATOR: BytesLike,
      overrides?: CallOverrides
    ): Promise<[void]>;

    updateValidatorPermit(
      addr: string,
      validator: string,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      DOMAIN_SEPARATOR: BytesLike,
      overrides?: CallOverrides
    ): Promise<[void]>;
  };

  getPrivateDataByIndexPermit(
    addr: string,
    index: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    DOMAIN_SEPARATOR: BytesLike,
    overrides?: CallOverrides
  ): Promise<void>;

  getPrivateDataByNamePermit(
    addr: string,
    name: string,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    DOMAIN_SEPARATOR: BytesLike,
    overrides?: CallOverrides
  ): Promise<void>;

  labelIsExistPermit(
    addr: string,
    labelHash: string,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    DOMAIN_SEPARATOR: BytesLike,
    overrides?: CallOverrides
  ): Promise<void>;

  labelNamePermit(
    addr: string,
    index: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    DOMAIN_SEPARATOR: BytesLike,
    overrides?: CallOverrides
  ): Promise<void>;

  saveWithoutMintingPermit(
    addr: string,
    data: string,
    cryptoLabel: string,
    _params: BytesLike,
    labelHash: string,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    DOMAIN_SEPARATOR: BytesLike,
    overrides?: CallOverrides
  ): Promise<void>;

  updateValidatorPermit(
    addr: string,
    validator: string,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    DOMAIN_SEPARATOR: BytesLike,
    overrides?: CallOverrides
  ): Promise<void>;

  callStatic: {
    getPrivateDataByIndexPermit(
      addr: string,
      index: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      DOMAIN_SEPARATOR: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    getPrivateDataByNamePermit(
      addr: string,
      name: string,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      DOMAIN_SEPARATOR: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    labelIsExistPermit(
      addr: string,
      labelHash: string,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      DOMAIN_SEPARATOR: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    labelNamePermit(
      addr: string,
      index: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      DOMAIN_SEPARATOR: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    saveWithoutMintingPermit(
      addr: string,
      data: string,
      cryptoLabel: string,
      _params: BytesLike,
      labelHash: string,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      DOMAIN_SEPARATOR: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    updateValidatorPermit(
      addr: string,
      validator: string,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      DOMAIN_SEPARATOR: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    getPrivateDataByIndexPermit(
      addr: string,
      index: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      DOMAIN_SEPARATOR: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPrivateDataByNamePermit(
      addr: string,
      name: string,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      DOMAIN_SEPARATOR: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    labelIsExistPermit(
      addr: string,
      labelHash: string,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      DOMAIN_SEPARATOR: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    labelNamePermit(
      addr: string,
      index: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      DOMAIN_SEPARATOR: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    saveWithoutMintingPermit(
      addr: string,
      data: string,
      cryptoLabel: string,
      _params: BytesLike,
      labelHash: string,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      DOMAIN_SEPARATOR: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateValidatorPermit(
      addr: string,
      validator: string,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      DOMAIN_SEPARATOR: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getPrivateDataByIndexPermit(
      addr: string,
      index: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      DOMAIN_SEPARATOR: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPrivateDataByNamePermit(
      addr: string,
      name: string,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      DOMAIN_SEPARATOR: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    labelIsExistPermit(
      addr: string,
      labelHash: string,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      DOMAIN_SEPARATOR: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    labelNamePermit(
      addr: string,
      index: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      DOMAIN_SEPARATOR: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    saveWithoutMintingPermit(
      addr: string,
      data: string,
      cryptoLabel: string,
      _params: BytesLike,
      labelHash: string,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      DOMAIN_SEPARATOR: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateValidatorPermit(
      addr: string,
      validator: string,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      DOMAIN_SEPARATOR: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
